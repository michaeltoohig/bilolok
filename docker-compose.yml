x-backend: &backend
  build:
    context: ./backend/app
    dockerfile: backend.dockerfile
    target: development
  volumes:
    - "${DATA_LOCAL_DIR}:/data"
  depends_on:
    - db
    - redis
  environment:
    - DATA_LOCAL_DIR=/data
    - DEBUG
    - SECRET_KEY
    - SERVER_HOST
    - FRONTEND_HOST
    - BACKEND_CORS_ORIGINS
    - PROJECT_NAME
    - PROJECT_SLUG
    # - SENTRY_DSN
    # - SENTRY_HOST
    # - SENTRY_PROJECT_IDS
    - VAPID_PRIVATE_KEY
    - VAPID_PUBLIC_KEY
    - VAPID_MAILTO
    - POSTGRES_SERVER
    - POSTGRES_USER
    - POSTGRES_PASSWORD
    - POSTGRES_DB
    - REDIS_SERVER
    - REDIS_PORT
    - MAIL_TLS
    - MAIL_SSL
    - MAIL_PORT
    - MAIL_SERVER
    - MAIL_USERNAME
    - MAIL_PASSWORD
    - MAIL_FROM
    - MAIL_FROM_NAME
    - MAIL_USE_CREDENTIALS
    - FIRST_SUPERUSER
    - FIRST_SUPERUSER_PASSWORD
    - VIDEO_SERVER
    - THUMBOR_SECURITY_KEY
    - THUMBOR_SERVER

services:
  db:
    image: postgres:13
    volumes:
      - bilolok-db-data:/var/lib/postgresql/data/pgdata
    # env_file:
    #   - .env
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_SERVER
      - POSTGRES_PORT
      - POSTGRES_DB
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"

  # test_db:
  #   image: postgres:13
  #   environment:
  #     - PGDATA=/var/lib/postgresql/data/pgdata
  #     - POSTGRES_USER=user
  #     - POSTGRES_PASSWORD=password
  #     - POSTGRES_DB=test_data
  #   ports:
  #     - "5433:5432"
  #   profiles:
  #     - dev

  redis:
    image: redis:6
    # env_file:
    #   - .env
    ports:
      - "6379:6379"

  admin:
    image: adminer
    ports:
      - 8081:8080
    depends_on: 
      - db
    # profiles:
    #   - dev

  mail:
    image: maildev/maildev
    ports:
      - "1025:25"
      - "1080:1080"
    # profiles:
    #   - dev

  tusd:
    image: tusproject/tusd
    ports:
      - "8070:8070"
    volumes:
      - "${DATA_LOCAL_DIR}/uploads/:/data/"
    # env_file:
    #   - .env
    command: -port 8070 -upload-dir /data/ -behind-proxy -hooks-http http://backend:8000/api/v1/tus-hook -hooks-http-forward-headers authorization -hooks-enabled-events pre-create,post-finish

  thumbor:
    image: ghcr.io/minimalcompact/thumbor
    volumes:
      - "${DATA_LOCAL_DIR}/:/data/uploads/"
    # env_file:
    #   - .env
    environment:
      # VIRTUAL_HOST is picked up by nginx-proxy. Here it's set for localhost
      # but you usually need to point it to your domain, e.g. thumbor.example.com
      - VIRTUAL_HOST=localhost
      # THUMBOR_NUM_PROCESSES control how many processes run inside the container
      # Normally this is set in connection with the number of CPU cores
      # Note however that you can also use the docker-compose scale option to dynamically
      # scale your thumbor instances
      - THUMBOR_NUM_PROCESSES=4
      # this would allow CORS from any origin (you can restrict to specific origins if you want)
      - CORS_ALLOW_ORIGIN=*
      # returns a webp image if browser Accept headers match
      - AUTO_WEBP=True
      # nginx-proxy does caching automatically, so no need to store the result storage cache
      # (this greatly speeds up and saves on CPU)
      - RESULT_STORAGE=thumbor.result_storages.no_storage
      - RESULT_STORAGE_STORES_UNSAFE=True
      - STORAGE=thumbor.storages.file_storage
      ### My modifications from original recipe
      - ALLOW_UNSAFE_URL=False
      - SECURITY_KEY=${THUMBOR_SECURITY_KEY}
      - LOADER=thumbor.loaders.file_loader
      - FILE_LOADER_ROOT_PATH=/data/uploads/

  thumbor-proxy:
    image: ghcr.io/minimalcompact/thumbor-nginx-proxy-cache
    environment:
      # setting the DEFAULT_HOST to the same as the VIRTUAL_HOST above.
      # Makes sure it works irrespective of the host name
      # Normally this won't be necessary, but it helps for testing.
      - DEFAULT_HOST=localhost
      # optional: control cache memory size (default 500m), cache size (default 10g) and inactive (default 300m)
      #           see https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_path
      - PROXY_CACHE_SIZE=500m
      - PROXY_CACHE_MEMORY_SIZE=250m
      - PROXY_CACHE_INACTIVE=1m
    volumes:
      # this is essential for nginx-proxy to detect docker containers, scaling etc
      # see https://github.com/jwilder/nginx-proxy
      - /var/run/docker.sock:/tmp/docker.sock:ro
      # mapping cache folder, to persist it independently of the container
      - bilolok-img-cache-data:/var/cache/nginx
    ports:
      - "8888:80"
      # - "4443:4443"

  # ffmpeg:
  #   image: jrottenberg/ffmpeg:4.4-alpine

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    stdin_open: true
    command: yarn serve
    ports:
      - 8080:8080
    volumes:
      - './frontend:/app:cached'
      - './frontend/node_modules:/app/node_modules:cached'
    environment:
      NODE_ENV: development

  backend:
    <<: *backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend/app/app:/app
      - "${DATA_LOCAL_DIR}:/data"
    
  worker:
    <<: *backend
    command: arq worker.WorkerSettings
    volumes:
      # - ./backend/app/app:/app
      - "${DATA_LOCAL_DIR}:/data"
  
volumes:
  bilolok-db-data:
  bilolok-img-cache-data: